
SweetAda GNU toolchain build scripts
--------------------------------------------------------------------------------

These are little shell scripts to build a GNAT toolchain from official FSF
repositories in a Linux environment.

Current versions of GNU packages are hardwired in the scripts. Download:

- https://ftp.gnu.org/pub/gnu/binutils/binutils-2.41.tar.[bz2|gz|lz|xz]
- https://ftp.gnu.org/pub/gnu/gcc/gcc-13.2.0/gcc-13.2.0.tar.[gz|xz]
- https://ftp.gnu.org/pub/gnu/gdb/gdb-13.2.tar.[gz|xz]

and have them decompressed in the directory stated by the PACKAGE_PARENT_PATH
variable, which is by default /usr/local/src.

The scripts are Bash scripts which use array features, so they can't be run
in a strict POSIX environment which does not provide this facility. Besides a
working native GCC compiler, a series of mainstream tools are needed online,
like Bison/readline/expat, so check your environment and install them to
satisfy requirements. Toolchain builds are out-of-tree to keep source
directories clean.

These scripts are rather generic, so they could be successfully run also in an
MSYS2 environment. That being said, it is extremely time-consuming to build
a toolchain in layered environments like MSYS2 or Cygwin. Although it may
sounds strange, it is much better and faster to cross-compile the toolchain
on, e.g., a Linux machine with a cross Linux-to-MinGW compiler, but it would
require another set of scripts (apart the availability of that cross-compiler)
to handle the so-named Canadian build process, which are definitely more
complex and hard to make available for every possible user.

The scripts generate a full log during configure and build phases. Albeit very
difficult to read, normally it is anyway rather simple to detect gross errors
like missing tools or basic utilities not available online, especially during
the configure phases.

The scripts have default choices suited for standard builds. The scripts
variables have, e.g., /usr/local/src as the home of the source packages, so
this variable could be changed to suit your environment. DESTDIR is only
useful for package distribution/relocation and you have no need to specify it
for a standard installation.

Uncomment the toolchain name useful for your needs, and all the phase_* flags.
They are kept separate so that it is not necessary to restart everything,
should some problem arise during the build. In particular, the configure phase
will wipe out the whole build directory.

If you want optimized executables, add -O2 to the flags for the host compiler
when configuring:

  CONFIGURE_VARS+=("CFLAGS=\"-g -O2\"")
  CONFIGURE_VARS+=("LDFLAGS=\"-g -O2\"")

In the same way, if you want smaller executables, remove the "-g" flag so to
avoid large executables filled with debug informations.

The scripts do not cover GPRbuild so far, because it is rather complex to
provide a simple procedure to build it under all situations, please refer to
official package providers.

Binutils
--------------------------------------------------------------------------------

Binutils is rather simple to build and does not require external support or
particular handlings.

GCC
--------------------------------------------------------------------------------

With this script, only one loop of GCC will be built. That means no libada,
libc or libm libraries, just the compiler and LibGCC. This suffices for a
normal use of SweetAda in practically all situations. Further development
will cover in the future also the libm build.

In order to successfully build GCC, the GMP, MPC and MPFR libraries are
needed, so download the appropriate package from your preferred package
provider. Of course you do not need the development packages but only the
(shared) libraries, plus headers.

It is highly advised to integrate ISL and libiconv source libraries into the
source tree of GCC. Download:

- https://libisl.sourceforge.io/isl-0.26.tar.[bz2|gz|xz]
- https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.17.tar.gz

and have them decompressed so that the following layout exists:

/usr/local/src
  |
  +- gcc-13.2.0
  |   |
  |   +-- INSTALL
  |   +-- c++tools
  |   ...
  |   +-- isl      (-> symlink to ISL source directory)
  |   +-- libiconv (-> symlink to libiconv source directory)
  |   ...
  ...

Note that the added directories should have no version suffix, so remove the
version suffix or create a symlink to the physical source directory.

GDB
--------------------------------------------------------------------------------

Like GCC, it is highly advised to integrate the ISL and libiconv libraries
into the source tree of GDB as well.

Due to not-perfect integration with all possible OS distribution layouts, a
little helper script exists in order to detect Python 3 libraries. The option
is specified in the configure list, but it is commented out because maybe your
system has a 1-1 match with the GDB's configure idea about which (if exists)
Python is actually installed in the system.

If you experience problems, try to uncomment this option, then, if the problem
persists, try to discover potential issues by checking if python-config
(usually located in /usr/bin) provides correct responses and change parameters
thereof.

GNATTOOLS
--------------------------------------------------------------------------------

If you are building a GNAT toolchain, the provided GCC.sh script builds also
the GNAT tools as integral components of the toolchain, i.e., the various
GNATMAKE, GNATPREP, etc.

If, instead, you are using a ready-to-use toolchain from your preferred
provider, those tools unfortunately could not be present, because the provider
implicitly states that you should use other tools in order to manage your
projects (e.g., GPRbuild).

SweetAda does use these tools, because GNATMAKE is the original native tool
used to handle the various phases of compilation, so this kind of toolchains
prevent the use of the GNATMAKE build mode. Because of this, SweetAda has an
alternate mode which lets you use GPRbuild (and which is the default since its
use is more or less mainstream).

GNATMAKE build mode anyway is an optimal choice, because it offers a more
low-level view of the build process, besides being fast. But using a random
GNATMAKE coupled with an external toolchain could not work straight 100% of
the times, since most likely there will be a discrepancy in ALI library
versioning. This leads to not-perfect resolution of dependencies and forces a
rebuild from scratch of the project even if you change only one source file.

So, if you want to use the toolchain from your provider, and, at the same
time, want to use the GNATMAKE build mode, then this script allows you to
build only the GNAT tool executables that are needed, without a full compiler
build (which is a rather tedious process). The script patches the string which
defines the ALI version, so that the GNATMAKE executable will agree with the
compiler frontend.

Obviously this requires a very high degree of compatibility -- in a strict
sense -- between two different entities, but problems are unlikely to happen
since those entities share nearly everything of a common heritage.

It is worth noting that, theoretically, even a GNATMAKE built for a different
target should work equally well, as far as the RTS path is well defined and is
different from the default RTS wrapped inside the executable by the GCC
configure build system, which is true in SweetAda.

In order to run GNATTOOLS.sh successfully, you should have the GCC source
package available online, with the same prerequisites as the GCC.sh script
wants.

Then, you should know the ALI version emitted by the compiler toolchain used,
and you have to specify the ALI string in the script, where some examples are
outlined. The best method is to compile something and inspect the .ali file
generated (the "V" line which comes first).

Finally, choose your target (of course the toolchain names have to match
exactly), uncomment all the various phases, and run the script. If everything
goes well, you should find a (prefixed-)gnatmake executable in the
installation directory.

